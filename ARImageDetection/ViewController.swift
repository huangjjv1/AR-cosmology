//
//  ViewController.swift
//  ARImageDetection
//
//  Created by ARgroup on 2019-10-09.
//  Copyright © 2019 ARgroup. All rights reserved.
//

import UIKit
import SceneKit
import ARKit

class ViewController: UIViewController, ARSCNViewDelegate {
    var planetNode=SCNNode() //the model variable to be displayed
    var nodeName: String! //the model name
    var targetNumber = 1 //the targetname generated by the system
    var targetName = String() //correspoding Name, String type
    var currentAnchorName = String() //the target name
    
//create a function to pop up a window showing the clues and the target.
    func giveClues(text:String,title:String) {
        //initialize a pop-window called 'alert'. This is the object we want to put information in.
        let alert = UIAlertController(title: "Clues Box", message: "this is a pop-up window", preferredStyle: .alert)
        
        //UIAlertAction is a button-like object to be added in the window.↓This is a OK sample,which print a string when pressed.
        let ok = UIAlertAction(title: "Got it", style: .default, handler: {
            ACTION in
            print("Got it!")
        })
//        let cancel = UIAlertAction(title: "Retuen", style: .cancel, handler: nil)//This is a commented button
        alert.addAction(ok)
        //use parameter 'text' to be the content in the window, which is supposed to contain some target and clue information.
        let textPrint = text
        alert.message = textPrint
        //use parameter 'title' to be the title in the window, which is basically supposed to display whether user succeeded or not.
        alert.title = title
        //use present function to let the whole pop-up window be displayed.
        present(alert, animated: true, completion: nil)
    }
    // This a button function linked to the one in the very center of the main screen
    // whenever this button is pressed, this function will reactivate the whole SCNview
    @IBAction func reRecongnize(_ sender: Any) {
        viewWillDisappear(true)
        let anchors_all = sceneView.session.currentFrame!.anchors
        for anchor in anchors_all {
            sceneView.session.remove(anchor: anchor)
        }
        print(sceneView.session.currentFrame!.anchors)
        viewWillAppear(true)
        
    }

    //initialize the score label
    @IBOutlet weak var scoreLabel: UILabel!
    
    // the function for jumpping to the other page and control which paramater will be sent to other view pages
        override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
            if segue.identifier == "HomeToDetail" {
    // decide which controller will be the next controller(for this one, the controller is DetailViewController)
                let toViewController = segue.destination as! DetailViewController
    // pass the nodeName to other page
                toViewController.nodeName = nodeName
            }
            
            if segue.identifier == "HomeToHint" {
    // decide which controller will be the next controller(for this one, the controller is HintViewController)
                let toViewController = segue.destination as! HintViewController
    // pass the nodeName to other page
                toViewController.nodeName = targetName
            }
        }
    //this the score users have got. whenever it is given value, it will be automatically added to the scoreLabel
    open var userScore: Int = 0 {
           didSet {
               // ensure UI update runs on main thread
               DispatchQueue.main.async {
                   self.scoreLabel.text = "Your current score:" + String(self.userScore) //put the score into the label.
               }
           }
       }
     // This a function linked to the game start/end button in the bottom-middle of the main screen
    // whenever this button is pressed, game will be started.
    @IBAction func gameStart(_ sender: UIButton) {
        //use the transparency of score label to indentify the status
        if self.scoreLabel.alpha == 0{
            self.scoreLabel.alpha = 100
            targetNumber = Int(arc4random() % 6 + 1) //gengerate the target name
            targetName = "target" + String(targetNumber)
            let text = "Please find the first target:" + targetName + "\nHere are some Clues ..." //the first clue should be added here
            giveClues(text: text,title:"Game Start!")//call the giveClues function to display it.
            print("Please find the first target:",targetName)
        }else{
            self.scoreLabel.alpha = 0
            let text = "Good game, your total score is: \(self.userScore). \nThank you!"//when the game ends, give the result of score.
            giveClues(text: text,title:"Game Over")//call the giveClues function to display it.
            print("Game ends, your total score:\(self.userScore). \nThank you!")
            self.userScore = 0
        }
    }
    @IBOutlet var sceneView: ARSCNView!//linked to the ARSCNView which is in the main screen to capture the object.
    
    // This a function linked to the game Submit button in the bottom-left of the main screen
    // Whenever this button is pressed, target will be submitted to the system.
    @IBAction func placeScreenButtonTapped(_ sender: UIButton) {
//        let anchors = sceneView.session.currentFrame!.anchors
//            print(anchors)
//            for anchor in anchors {
//                if let someNode = sceneView.node(for: anchor){
//                    someNode.removeFromParentNode()
//                }
//                sceneView.session.remove(anchor: anchor)
//            }
//            nowNode.removeFromParentNode()
//        }
        
//        let name = anchors.last?.name
        if self.scoreLabel.alpha == 100{
            currentAnchorName = sceneView.session.currentFrame!.anchors.last!.name! //get the name of current target
        }
        //make the decision and choose which result to be shown
        if currentAnchorName == targetName && self.scoreLabel.alpha == 100 {
            self.userScore += 1
            print("bingo! right!")
            targetNumber = Int(arc4random() % 6 + 1) //regenerate the next target number.
            targetName = "target" + String(targetNumber)
            let text = "Please find the next target:" + targetName + "\nHere are some Clues ...\nOr press the game button to quit"
            giveClues(text: text,title:"You are right!")
            print("Please find the next:",targetName)
        }else if currentAnchorName != targetName && self.scoreLabel.alpha == 100{
            let text = "present target is :" + currentAnchorName + ", please go on to find" + targetName
            giveClues(text: text,title:"Not this one :)")
            print("present target is :",currentAnchorName)
            print("Not this one, please go on!,  to find:",targetName)
        }else{
            return
        }
    }
    // This a function linked to the game Submit button in the bottom-middle of the main screen
    // Whenever this button is pressed, target will be scaled up
    @IBAction func plusButtonTapped(_ sender: UIButton) {
        let scalePlus = SCNAction.scale(by: 1.3, duration: 2)
        planetNode.runAction(scalePlus)
    }
    // This a function linked to the game Submit button in the right-middle of the main screen
    // Whenever this button is pressed, target will be scaled down.
    @IBAction func minusButtonTapped(_ sender: UIButton) {
        let scaleMinus = SCNAction.scale(by: 0.7, duration: 2)
        planetNode.runAction(scaleMinus)
    }
    //the fuction will be activated when the view is already opened
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Set the view's delegate
        sceneView.delegate = self
        // Show statistics such as fps and timing information
        sceneView.showsStatistics = true
        sceneView.debugOptions = [ARSCNDebugOptions.showWorldOrigin,ARSCNDebugOptions.showFeaturePoints]
        self.userScore = 0
        self.scoreLabel.alpha = 0
        self.targetName = ""
        self.nodeName = ""
        // Create a new scene
//        let scene = SCNScene(named: "art.scnassets/ship.scn")!
        
        // Set the scene to the view
//        sceneView.scene = scene
    }
   //the fuction will be activated just before the view is shown.
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Create a session configuration
        let configuration = ARImageTrackingConfiguration()
        
        guard let referenceImages = ARReferenceImage.referenceImages(inGroupNamed: "AR Resources-1", bundle: Bundle.main) else { return }
        configuration.trackingImages = referenceImages
        configuration.maximumNumberOfTrackedImages = 1

        // Run the view's session
        sceneView.session.run(configuration)
    }
       //the fuction will be activated just before the view is closed.
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        // Pause the view's session
        sceneView.session.pause()
    }

    // MARK: - ARSCNViewDelegate
    

    // Override to create and configure nodes for anchors added to the view's session.
    //whenever the sceneView finds a object, this function will be automaically activated, and this is a very important function.***
    func renderer(_ renderer: SCNSceneRenderer, nodeFor anchor: ARAnchor) -> (SCNNode?) {
        let name = anchor.name!
        print(name)
        currentAnchorName = name
        nodeName = name
        var node:SCNNode
        var iPhoneNode = SCNNode()
        (node,iPhoneNode) = spawningmodel(name: name) //call the model spawning functing
        planetNode = iPhoneNode
//        print(name)
        nodeName = name
        //↓ These are focus-square-releated, we can leave them alone.
//        guard focusSquare == nil else {
//            return
//        }
//        guard focusSquare == nil else {return}
//        let focusSquareLocal = FocusSquare()
//        sceneView.scene.rootNode.addChildNode(focusSquareLocal)
//        focusSquare = focusSquareLocal
        let anchors = sceneView.session.currentFrame!.anchors //get all the anchors
        for anchor in anchors { //deldete all the anchors in case bugs happen
            sceneView.session.remove(anchor: anchor)
        }
        //return the node to display it.
        return node
    }
    // use this function to spawn the corespondding object model.
    func spawningmodel(name:String)->(SCNNode,SCNNode){
        let node = SCNNode() //initialize the main node to be displayed
        let plane = SCNPlane(width: 0.7, height: 0.35) //initialize the plane to be put right at the object
        let deviceScene = SKScene(fileNamed: name) //load the bottom sks file to be put right at the plane
        var iPhoneNode=SCNNode() //initialize the 3d-model variable
        plane.firstMaterial?.diffuse.contents = deviceScene
        plane.firstMaterial?.isDoubleSided = true
        plane.firstMaterial?.diffuse.contentsTransform = SCNMatrix4Translate(SCNMatrix4MakeScale(1, -1, 1), 0, 1, 0)

        let planeNode = SCNNode(geometry: plane)
        planeNode.eulerAngles.x = -.pi / 2
        
//        var iPhoneNode = SCNNode()
        let location = "art.scnassets/" + "target1" + ".scn" //choose which scn model to be shown, use target1.scn as an expample
        let iPhoneScene = SCNScene(named:location)! //load the 3d-model to be shown
        iPhoneNode = iPhoneScene.rootNode.childNodes.first!
        iPhoneNode.position = SCNVector3(0, 0, 0.15)
        
        node.addChildNode(planeNode) //the main node is added a plane
        planeNode.addChildNode(iPhoneNode) //add the 3d-model based on the plane
        iPhoneNode.runAction(rotateObject()) //let it rotate
        return (node,iPhoneNode)
    }
    //the rotating function to let the model rotate.
    func rotateObject() -> SCNAction{
        let action = SCNAction.rotateBy(x: 0, y: CGFloat(GLKMathDegreesToRadians(360)), z: 0, duration: 3)
        let repeatAction = SCNAction.repeatForever(action)
        return repeatAction
        }
        
    func session(_ session: ARSession, didFailWithError error: Error) {
        // Present an error message to the user
        
    }
    
    func sessionWasInterrupted(_ session: ARSession) {
        // Inform the user that the session has been interrupted, for example, by presenting an overlay
        
    }
    
    func sessionInterruptionEnded(_ session: ARSession) {
        // Reset tracking and/or remove existing anchors if consistent tracking is required
        
    }
}
